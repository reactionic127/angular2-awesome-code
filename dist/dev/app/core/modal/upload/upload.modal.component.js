"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var index_1 = require('../../../shared/index');
var angular2_modal_1 = require('angular2-modal');
var router_1 = require('@angular/router');
var ng2_file_upload_1 = require('ng2-file-upload');
var UploadWindowModalComponent = (function () {
    function UploadWindowModalComponent(dialog, renderer, router) {
        this.dialog = dialog;
        this.renderer = renderer;
        this.router = router;
        this.context = dialog.context;
        this.backendApi = index_1.Config.API;
        this.selectedImgIndex = this.context.index;
        this.imgLIST = this.context.imgLIST;
        this.requiredImgLIST = [];
        this.requiredImgLIST.push(this.imgLIST[this.selectedImgIndex]);
        for (var i = 0; i < this.imgLIST.length; i++) {
            if (i !== this.selectedImgIndex
                && !this.imgLIST[i]['uploaded']
                && !this.imgLIST[i]['uploadStatus']) {
                this.requiredImgLIST.push(this.imgLIST[i]);
            }
        }
        this.postDataList = [];
        for (var i = 0; i < this.requiredImgLIST.length; i++) {
            this.postDataList[i] = {
                code: 200,
                data: {
                    PhotoID: this.requiredImgLIST[i].id,
                    UserID: 0,
                    slug: this.context.postData.data.slug
                }
            };
        }
        console.log(this.requiredImgLIST);
        console.log(this.postDataList);
        this.currentUploadIndex = 0;
        this.uploadedCounter = 0;
        this.changeInfo(this.currentUploadIndex);
        this.STATUSES = ['selecting', 'uploading', 'done'];
        this.currentStatus = this.STATUSES[0];
        this.isSuccessResult = false;
    }
    UploadWindowModalComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.currentUploadIndex = 0;
        this.uploader = new ng2_file_upload_1.FileUploader({ url: this.backendApi + "/v1/data/fileupload" });
        this.uploader.onProgressAll = function (progress) {
            if (_this.currentStatus === _this.STATUSES[1]) {
                _this.renderer.setElementStyle(_this.fileProgress.nativeElement, 'width', progress + '%');
            }
        };
        this.uploader.onBuildItemForm = function (fileItem, form) {
            form.append('data', JSON.stringify(_this.postDataList[fileItem.fileIndex]));
        };
        this.uploader.onAfterAddingFile = function (fileItem) {
            fileItem.withCredentials = false;
            fileItem.fileIndex = _this.currentUploadIndex;
            var counter = _this.imgLIST.indexOf(_this.requiredImgLIST[_this.currentUploadIndex]);
            _this.imgLIST[counter].uploadStatus = true;
            fileItem.upload();
            _this.currentUploadIndex++;
            if (_this.currentUploadIndex < _this.requiredImgLIST.length) {
                _this.changeInfo(_this.currentUploadIndex);
            }
            else {
                _this.currentStatus = _this.STATUSES[1];
            }
        };
        this.uploader.onCompleteItem = function (item, res, status, headers) {
            var counter = _this.imgLIST.indexOf(_this.requiredImgLIST[item.fileIndex]);
            _this.imgLIST[counter].uploadStatus = false;
            _this.uploadedCounter++;
            if (status === 500) {
                _this.currentStatus = _this.STATUSES[2];
                _this.endBtnString = 'Fail to upload';
                _this.isSuccessResult = false;
            }
            else {
                res = JSON.parse(res);
                _this.imgLIST[counter].required = false;
                _this.imgLIST[counter].uploaded = true;
                _this.imgLIST[counter].uploadedImgUrl = res.data.path;
                if (_this.uploadedCounter >= _this.requiredImgLIST.length) {
                    _this.currentStatus = _this.STATUSES[2];
                    _this.endBtnString = 'Done!';
                    _this.isSuccessResult = true;
                }
            }
        };
    };
    UploadWindowModalComponent.prototype.beforeDismiss = function () {
        return false;
    };
    UploadWindowModalComponent.prototype.beforeClose = function () {
        return false;
    };
    UploadWindowModalComponent.prototype.onCancel = function () {
        this.dialog.close();
    };
    UploadWindowModalComponent.prototype.changeInfo = function (index) {
        this.title = this.requiredImgLIST[index].text;
        this.description = this.requiredImgLIST[index].desc;
        this.imgURL = this.backendApi + this.requiredImgLIST[index].img;
    };
    __decorate([
        core_1.ViewChild('fileUpload'), 
        __metadata('design:type', core_1.ElementRef)
    ], UploadWindowModalComponent.prototype, "fileUpload", void 0);
    __decorate([
        core_1.ViewChild('fileProgress'), 
        __metadata('design:type', core_1.ElementRef)
    ], UploadWindowModalComponent.prototype, "fileProgress", void 0);
    UploadWindowModalComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'modal-content',
            templateUrl: 'upload.modal.component.html',
            styleUrls: ['upload.modal.component.css']
        }), 
        __metadata('design:paramtypes', [angular2_modal_1.DialogRef, core_1.Renderer, router_1.Router])
    ], UploadWindowModalComponent);
    return UploadWindowModalComponent;
}());
exports.UploadWindowModalComponent = UploadWindowModalComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
